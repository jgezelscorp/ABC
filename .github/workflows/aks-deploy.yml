name: AKS CI/CD Deploy

on:
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  id-token: write
  actions: write
  deployments: write

jobs:
  validate-and-whatif:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/cli@v2
        with:
          azcliversion: 2.76.0     # optional; omit to use agentâ€™s/default image
          inlineScript: |
            az version

      - name: Show workspace and repo tree (debug)
        run: |
          echo "GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
          echo "pwd: $(pwd)"
          echo "Listing repo root:"
          ls -la
          echo "Listing AVM folder if present:"
          ls -la AVM || true
          echo "Listing AVM/AKS folder if present:"
          ls -la AVM/AKS || true

      - name: Install Bicep CLI
        run: |
          az bicep install --version latest

      - name: Bicep build
        run: |
          az bicep build --file AVM/AKS/main.bicep

      - name: Install and run Bicep linter
        run: |
          set -e
          echo 'Attempting to install bicep-lint via npm (if available)'
          if command -v npm >/dev/null 2>&1; then
            npm install -g @microsoft/bicep-linter@latest || true
          fi

          echo 'Attempting to install bicep-lint as a dotnet tool (if npm unavailable)'
          if ! command -v bicep-lint >/dev/null 2>&1 && command -v dotnet >/dev/null 2>&1; then
            dotnet tool install --global bicep-linter || true
            export PATH="$PATH:$HOME/.dotnet/tools"
          fi

          if ! command -v bicep-lint >/dev/null 2>&1; then
            echo 'bicep-lint is not available. Failing the job to enforce linting.'
            exit 1
          fi

          echo 'Running bicep-lint against AVM/AKS/main.bicep'
          bicep-lint AVM/AKS/main.bicep

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Resource group check
        id: rg
        run: |
          rg_exists=$(az group exists --name ${{ secrets.AKS_RG }} )
          echo "rg_exists=$rg_exists" >> $GITHUB_OUTPUT

      - name: What-If
        if: steps.rg.outputs.rg_exists == 'true'
        run: |
          if [ -f AVM/AKS/parameters.bicepparam ]; then
            PARAMETERS='@AVM/AKS/parameters.bicepparam'
          else
            PARAMETERS='@AVM/AKS/parameters.json'
          fi
          az deployment group --whatif --resource-group ${{ secrets.AKS_RG }} --template-file AVM/AKS/main.bicep --parameters $PARAMETERS --no-prompt

      - name: Validate (will create RG if missing)
        if: steps.rg.outputs.rg_exists != 'true'
        run: |
          az group create --name ${{ secrets.AKS_RG }} --location ${{ secrets.AKS_LOCATION }}
          if [ -f AVM/AKS/parameters.bicepparam ]; then
            PARAMETERS='@AVM/AKS/parameters.bicepparam'
          else
            PARAMETERS='@AVM/AKS/parameters.json'
          fi
          az deployment group validate --resource-group ${{ secrets.AKS_RG }} --template-file AVM/AKS/main.bicep --parameters $PARAMETERS

  deploy-on-merge:
    needs: validate-and-whatif
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy AKS
        run: |
          if [ -f AVM/AKS/parameters.bicepparam ]; then
            PARAMETERS='@AVM/AKS/parameters.bicepparam'
          else
            PARAMETERS='@AVM/AKS/parameters.json'
          fi
          az deployment group create --resource-group ${{ secrets.AKS_RG }} --template-file AVM/AKS/main.bicep --parameters $PARAMETERS --confirm-with-what-if
